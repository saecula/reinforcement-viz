/* eslint-disable no-sparse-arrays */

const averageOf = (arr) => arr.reduce((tot, x) => tot + x, 0) / arr.length;

export class MonteCarloAgent {
  constructor(props) {
    this.actionValues = this.actionValueFuncInit(
      props.allStates,
      props.getActionsForState
    );
    this.returnsMap = this.returnsMapInit(
      props.allStates,
      props.getActionsForState
    );
    this.rewardsList = [];
    this.epsilon = props.options.epsilon;
    this.gamma = props.options.gamma;
    this.getActions = props.getActionsForState;
  }
  toKeyString(state, action) {
    const [y, x] = state;
    return `${y},${x}${action}`;
  }
  actionValueFuncInit(allStates, getActionsForState) {
    const actionValues = {};
    allStates.forEach((stateRow, i) => {
      stateRow.forEach((_, j) => {
        const actions = getActionsForState([i, j]);
        actions.forEach((action) => {
          const key = this.toKeyString([i, j], action);
          actionValues[key] = 0;
        });
      });
    });
    return actionValues;
  }
  returnsMapInit(allStates, getActionsForState) {
    const returnsMap = {};
    allStates.forEach((stateRow, i) => {
      stateRow.forEach((_, j) => {
        const actions = getActionsForState([i, j]);
        actions.forEach((action) => {
          const key = this.toKeyString([i, j], action);
          returnsMap[key] = [];
        });
      });
    });
    return returnsMap;
  }

  act(state) {
    const doRandomAction = () => this.epsilon > Math.random();
    const actions = this.getActions(state);

    if (actions[0] === null) {
      return null;
    }

    if (doRandomAction()) {
      const idx = Math.floor(actions.length * Math.random());

      return actions[idx];
    } else {
      const mappedActions = actions.map((action) => ({
        name: action,
        value: this.actionValues[this.toKeyString(state, action)],
      }));
      const max = Math.max(...mappedActions.map((x) => x.value));
      const filtered = mappedActions.filter((x) => x.value >= max);
      const idx = Math.floor(filtered.length * Math.random());

      return filtered[idx].name;
    }
  }

  handleReward(state, action, reward, currentState) {
    this.rewardsList.push({
      state,
      action,
      reward,
    });
  }

  calculateResult() {
    const { rewardsList, returnsMap, actionValues, gamma } = this;
    let nextReturn = 0;

    for (let i = rewardsList.length - 1; i >= 0; --i) {
      const { state, action, reward } = rewardsList[i];

      const expectedReturn = reward + gamma * nextReturn;

      const key = this.toKeyString(state, action);
      returnsMap[key].push(expectedReturn);
      actionValues[key] = averageOf(returnsMap[key]);

      nextReturn = expectedReturn;
    }

    const episodeResult = rewardsList.reduce((tot, x) => tot + x.reward, 0);
    this.rewardsList = [];
    return episodeResult;
  }
}

export const agentsList = [
  {
    key: 'MONTE_CARLO',
    name: 'Monte Carlo',
    fields: ['alpha', 'gamma', 'epsilon'],
    class: MonteCarloAgent,
  },
  {
    key: 'SARSA',
    name: 'SARSA',
    class: MonteCarloAgent,
    fields: ['alpha', 'gamma', 'epsilon'],
  },
  {
    key: 'Q_LEARNING',
    name: 'Q learning',
    class: MonteCarloAgent,
    fields: ['alpha', 'gamma', 'epsilon'],
  },
  {
    key: 'DOUBLE_Q_LEARNING',
    name: 'Double Q learning',
    class: MonteCarloAgent,
    fields: ['alpha', 'gamma', 'epsilon'],
  },
  {
    key: 'N_SOMETHINGOROTHER',
    name: 'n somethingorother',
    class: MonteCarloAgent,
    fields: ['alpha', 'gamma', 'epsilon'],
  },
];

// needs to be agent-specific
export const defaultValue = {
  epsilon: 0.1,
  alpha: 0.5,
  gamma: 0.8,
};

export const initialScenario = {
  id: 0,
  key: 'MONTE_CARLO',
  name: 'Monte Carlo',
  class: MonteCarloAgent,
};

export const O = 'white';
export const B = 'black';
export const R = 'red';
export const G = 'green';

export class TiniestEnv {
  constructor() {
    this.grid = [
      [O, O, O, O],
      [R, O, O, O],
      [R, O, O, O],
      [R, O, O, G],
    ];
    this.rewards = [
      [0, -1, -1, -1],
      [-1, -1, -1, -1],
      [-1, -1, -2, -2],
      [0, 0, -2, 17],
    ];
    this.state = [0, 0];
    this.statesVisited = [];

    // put in general env class
    this.size = [this.grid.length - 1, this.grid[0].length - 1];
    this.actions = {
      left: 'left',
      right: 'right',
      down: 'down',
      up: 'up',
    };

    this.actionMap = this.generateActionMap();
  }

  reset() {
    this.state = [0, 0];
    this.statesVisited = [[0, 0]];
  }

  generateActionMap() {
    const actionMap = {};
    const { left, right, down, up } = this.actions;
    const [limitI, limitJ] = this.size;
    const wallTileColor = B;

    this.grid.forEach((gridRow, i) =>
      gridRow.forEach((state, j) => {
        const stateActions = [];
        if (state !== wallTileColor) {
          if (j > 0 && this.grid[i][j - 1] !== wallTileColor) {
            stateActions.push(left);
          }
          if (j < limitJ && this.grid[i][j + 1] !== wallTileColor) {
            stateActions.push(right);
          }
          if (i > 0 && this.grid[i - 1][j] !== wallTileColor) {
            stateActions.push(up);
          }
          if (i < limitI && this.grid[i + 1][j] !== wallTileColor) {
            stateActions.push(down);
          }
        }
        actionMap[i + ',' + j] = stateActions;
      })
    );
    return actionMap;
  }

  getActionsForState = (state) => {
    const [x, y] = state;
    return this.actionMap[x + ',' + y];
  };

  // state: int Array(2)
  // action: str
  step(action) {
    const { left, right, down, up } = this.actions;
    let [y, x] = this.state;

    if (action === up) {
      y = y - 1;
    } else if (action === down) {
      y = y + 1;
    } else if (action === right) {
      x = x + 1;
    } else if (action === left) {
      x = x - 1;
    } else {
      throw new Error('Unknown step action:', action);
    }

    const newState = [y, x];
    const done = this.grid[y][x] === G;
    const reward = this.rewards[y][x];

    this.state = newState;
    this.statesVisited.push(newState);

    return [newState, reward, done];
  }
}

export const envs = [
  {
    key: 'CLIFF',
    name: 'cliff',
    class: TiniestEnv,
    states: [
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      ,
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
    ],
  },
  {
    key: 'WIND',
    name: 'wind',
    class: TiniestEnv,
    states: [
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      ,
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
    ],
  },
  {
    key: 'TUNNEL',
    name: 'tunnel',
    class: TiniestEnv,
    states: [
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      ,
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
    ],
  },
  {
    key: 'CASINO',
    name: 'casino',
    class: TiniestEnv,
    states: [
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      ,
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
      [
        O,
        O,
        O,
        O,
        R,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
        O,
      ],
    ],
  },
];
